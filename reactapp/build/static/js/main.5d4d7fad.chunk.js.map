{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","useState","watchMovie","setWatchMovie","countWatchMovie","setCountWatchMovie","myRatingMovie","setMyRatingMovie","isRatingMovie","setIsRatingMovie","globalRating","rating","globalCountRating","countRating","colorLike","cursor","movieSee","color","colorWatch","setMyRating","tabRating","i","count","push","onClick","style","icon","faStar","nbTotalNote","nbTotalVote","avgTotal","Math","round","tabGlobalRating","Col","xs","lg","xl","Card","marginBottom","height","CardImg","top","src","movieImg","alt","movieName","CardBody","faHeart","name","img","handleClickDeleteMovieParent","handleClickAddMovieParent","faVideo","Badge","ButtonGroup","size","Button","CardTitle","CardText","movieDesc","App","moviesCount","setMoviesCount","moviesWishList","setMoviesWishList","popoverOpen","setPopoverOpen","moviesList","setMoviesList","handleClickAddMovie","a","fetch","method","headers","body","handleClickDeleteMovie","filter","object","cardWish","map","movie","ListGroupItem","ListGroupItemText","width","useEffect","response","json","jsonResponse","movies","responseWish","jsonResponseWish","wishListFromDB","length","loadData","movieListItems","isSee","undefined","find","element","title","movieOverview","overview","substr","backdrop_path","key","vote_average","vote_count","backgroundColor","Container","Nav","className","NavItem","NavLink","id","type","Popover","placement","isOpen","target","toggle","PopoverHeader","PopoverBody","ListGroup","Row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d4d7fad.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport { \r\n  Button,\r\n  Col,\r\n  Card,\r\n  CardImg,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Badge,\r\n  ButtonGroup,\r\n } from 'reactstrap';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faStar, faVideo} from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Movie(props) {\r\n\r\n  const [watchMovie, setWatchMovie] = useState(false)\r\n  const [countWatchMovie, setCountWatchMovie] = useState(0)\r\n  const [myRatingMovie, setMyRatingMovie] = useState(0)\r\n  const [isRatingMovie, setIsRatingMovie] = useState(false)\r\n  const [rating, setRating] = useState(props.globalRating)\r\n  const [countRating, setCountRating] = useState(props.globalCountRating)\r\n\r\n  // LIKE\r\n\r\n  var changeLiked = (name, img) => {\r\n    if(props.movieSee === true){\r\n      props.handleClickDeleteMovieParent(name)\r\n    } else {\r\n      props.handleClickAddMovieParent(name, img)\r\n    }\r\n  }\r\n\r\n  var colorLike = {cursor:\"pointer\"};\r\n  if(props.movieSee){\r\n    colorLike = {cursor:\"pointer\", color: \"#e74c3c\"}\r\n  } \r\n\r\n  // WATCH\r\n\r\n  var addWatch = () => {\r\n    setWatchMovie(true)\r\n    setCountWatchMovie(countWatchMovie+1)\r\n  }\r\n  \r\n  if(watchMovie){\r\n    var colorWatch = {color: '#e74c3c'}\r\n  } else {\r\n    var colorWatch = {}\r\n  }\r\n\r\n  // MY RATING\r\n\r\n  var setMyRating = (rating) => {\r\n    if(rating < 0){\r\n      rating = 0\r\n    }\r\n    if(rating > 10){\r\n      rating = 10\r\n    }\r\n    setMyRatingMovie(rating)\r\n    setIsRatingMovie(true)\r\n  }\r\n\r\n  var tabRating = []\r\n  for(var i=0;i<10;i++){\r\n      var color = {}\r\n      if(i<myRatingMovie){\r\n          color = {color: '#f1c40f'}\r\n      }\r\n      let count = i+1\r\n      tabRating.push(<FontAwesomeIcon onClick={() => setMyRating(count)} style={color} icon={faStar} /> )\r\n  }\r\n\r\n  // AVERAGE RATING\r\n\r\n  var nbTotalNote = rating * countRating\r\n  var nbTotalVote = countRating\r\n\r\n  if(isRatingMovie){\r\n    nbTotalVote +=1\r\n    nbTotalNote += myRatingMovie\r\n  }\r\n\r\n  var avgTotal = Math.round(nbTotalNote / nbTotalVote)\r\n  var tabGlobalRating = []\r\n  for(var i=0;i<10;i++){\r\n      var color = {}\r\n      if(i<avgTotal){\r\n          color = {color: '#f1c40f'}\r\n      }\r\n      tabGlobalRating.push(<FontAwesomeIcon style={color} icon={faStar} /> )\r\n  }\r\n\r\n  // ***************\r\n  // CALLBACK\r\n  \r\n  return (\r\n    <Col xs=\"12\" lg=\"6\" xl=\"4\">\r\n      <Card style={{marginBottom:30, height:500}}>\r\n        <CardImg top src={props.movieImg} alt={props.movieName} />\r\n        <CardBody>\r\n            <p>Like <FontAwesomeIcon style={colorLike} icon={faHeart} onClick={() => changeLiked(props.movieName,props.movieImg)} /></p>\r\n            <p>Nombre de vues  <FontAwesomeIcon style={colorWatch} icon={faVideo} onClick={() => addWatch()} /> <Badge color=\"secondary\">{countWatchMovie}</Badge></p>\r\n            <p>Mon avis \r\n            {tabRating}\r\n\r\n            <ButtonGroup size=\"sm\">\r\n                <Button onClick={() => setMyRating(myRatingMovie-1)} color=\"secondary\">-</Button>\r\n                <Button onClick={() => setMyRating(myRatingMovie+1)} color=\"secondary\">+</Button>\r\n            </ButtonGroup>\r\n            </p>\r\n            <p>Moyenne\r\n            {tabGlobalRating}\r\n            ({nbTotalVote})\r\n            </p>\r\n            <CardTitle>{props.movieName}</CardTitle>\r\n            <CardText>{props.movieDesc}</CardText>\r\n        </CardBody>\r\n      </Card>\r\n    </Col>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n  Container,\n  Row,\n  Button,\n  Nav,\n  NavItem,\n  NavLink,\n  Popover,\n  PopoverHeader,\n  PopoverBody,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemText,\n } from 'reactstrap';\n\nimport Movie from './components/Movie'\n\nfunction App() {\n\n  const [moviesCount, setMoviesCount] = useState(0);\n  const [moviesWishList, setMoviesWishList] = useState([]);\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const [moviesList, setMoviesList] = useState([]);\n\n  // WISHLIST\n\n  const toggle = () => setPopoverOpen(!popoverOpen);\n\n  var handleClickAddMovie = async (name, img) => {\n    setMoviesCount(moviesCount+1)\n    setMoviesWishList([...moviesWishList, {name:name,img:img}])\n    await fetch('/wishlist-movie', {\n      method: 'POST',\n      headers: {'Content-Type':'application/x-www-form-urlencoded'},\n      body: `name=${name}&img=${img}`\n    });\n  }\n\n  var handleClickDeleteMovie = async (name) => {\n    setMoviesCount(moviesCount-1)\n    setMoviesWishList(moviesWishList.filter(object => object.name !== name))\n    await fetch(`/wishlist-movie/${name}`, {\n      method: 'DELETE'\n    });\n  }\n\n  var cardWish = moviesWishList.map((movie,i) => {\n    return (\n      <ListGroupItem>\n        <ListGroupItemText onClick={() => {handleClickDeleteMovie(movie.name)}}>\n        <img width=\"25%\" src={movie.img} alt=\"movie\"/> {movie.name}\n        </ListGroupItemText>\n      </ListGroupItem>\n    )\n  })\n\n  // MOVIELIST & WISHLIST GET FROM BACKEND\n\n  useEffect( () => {\n     async function loadData(){\n        var response = await fetch('/new-movies');\n        var jsonResponse = await response.json();\n        setMoviesList(jsonResponse.movies);\n\n        var responseWish = await fetch('/wishlist-movie');\n        var jsonResponseWish = await responseWish.json();\n        var wishListFromDB = jsonResponseWish.movies.map((movie,i) => {\n          return {name: movie.movieName, img: movie.movieImg}\n        })\n        setMoviesWishList(wishListFromDB);\n        setMoviesCount(jsonResponseWish.movies.length);\n     } \n     loadData()\n  }, []);\n\n  // RENDER MOVIELIST TO FRONTEND\n\n  var movieListItems = moviesList.map((movie,i) => {\n    var result = moviesWishList.find(element => element.name === movie.title);\n    var isSee = false\n    if(result !== undefined){\n      isSee = true\n    }\n    \n    var movieOverview = movie.overview;\n    if(movie.overview.length > 80) {\n      movieOverview = movie.overview.substr(0, 76) + \"...\";\n    } \n    \n    var movieImg = movie.backdrop_path;\n    if(movie.backdrop_path == null) {\n      movieImg = \"/generique.jpg\";\n    } \n\n    return(<Movie key={i} movieSee={isSee} handleClickDeleteMovieParent={handleClickDeleteMovie} handleClickAddMovieParent={handleClickAddMovie} movieName={movie.title} movieDesc={movieOverview} movieImg={\"https://image.tmdb.org/t/p/w500/\"+movieImg} globalRating={movie.vote_average} globalCountRating={movie.vote_count} />)\n  })\n\n\n  // ****************\n  // CALLBACK\n  \n  return (\n    <div style={{backgroundColor:\"#232528\"}}>\n      <Container>\n        <Nav>\n          <span className=\"navbar-brand\">\n            <img src=\"./logo.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"logo\" />\n          </span>\n          <NavItem>\n            <NavLink style={{color:'white'}}>Last Releases</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink>\n              <Button id=\"Popover1\"  type=\"button\">{moviesCount} films</Button>\n              <Popover placement=\"bottom\" isOpen={popoverOpen} target=\"Popover1\" toggle={toggle}>\n                <PopoverHeader>WishList</PopoverHeader>\n                <PopoverBody>\n                <ListGroup>\n                {cardWish}\n                </ListGroup>\n                </PopoverBody>\n              </Popover>\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <Row>\n          {movieListItems}\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}